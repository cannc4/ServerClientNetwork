/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.io.*;
import static java.lang.Thread.State.WAITING;
import static java.lang.Thread.sleep;
import java.net.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JTextArea;
import java.util.Collections; 
import javax.swing.text.*;

/**
 *
 * @author Emir
 */
public class cs408client extends javax.swing.JFrame {

    private ServerAdd server;
    private LinkedBlockingQueue<String> messages = new LinkedBlockingQueue<String>();
    private Socket socket;
    private boolean enabled;
    private boolean dc = true;
    Object welcomeMSG = "";
    String selectedEvent = "";
    private Hashtable<String,List<Pair<Character, String>>> eventList = new Hashtable<String,List<Pair<Character, String>>>();
    private Hashtable<String, String> eventAttendBox = new Hashtable<String, String>();
   // private List<Pair<Character, String>> friendList = new ArrayList<Pair<Character, String>>();
    private Hashtable<String, Character> friendList = new Hashtable<String,Character>();
    private List<String> visEvents = new ArrayList<String>();
    
    
    
    public class Pair<L,R> {

        private L left;
        private R right;

        public Pair(L left, R right) {
            this.left = left;
            this.right = right;
        }

        public L getLeft() { return left; }
        public R getRight() { return right; }

        @Override
        public int hashCode() { return left.hashCode() ^ right.hashCode(); }

        @Override
        public boolean equals(Object o) {
            if (o == null) return false;
            if (!(o instanceof Pair)) return false;
            Pair pairo = (Pair) o;
            return this.left.equals(pairo.getLeft()) && this.right.equals(pairo.getRight());
        }
    }
    
    
    Thread messageHandling = new Thread() {
    public void run() {
        while (true) {
            try {
                String message = messages.take();
                
                append(message);
            } catch (InterruptedException | NullPointerException e) {
            }
        }
    }
    };


    
        public cs408client() {
        initComponents();
    }

            public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cs408client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cs408client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cs408client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cs408client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cs408client().setVisible(true);
            }
        });
        
        
    }
        

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eventsWindow = new javax.swing.JFrame();
        refreshButton = new javax.swing.JButton();
        eventsList = new javax.swing.JScrollPane();
        eventsGUI = new javax.swing.JList();
        attendButton = new javax.swing.JButton();
        notAttendButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        AttendingStatus = new javax.swing.JTextField();
        newEvent = new javax.swing.JButton();
        getAttendantsButton = new javax.swing.JButton();
        newEventWindow = new javax.swing.JFrame();
        jLabel3 = new javax.swing.JLabel();
        createNewEvent = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        newEventName = new javax.swing.JTextField();
        Day = new javax.swing.JComboBox();
        Month = new javax.swing.JComboBox();
        Hours = new javax.swing.JComboBox();
        Minute = new javax.swing.JComboBox();
        attendantsWindow = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        attendantsListGUI = new javax.swing.JList();
        usersFrame = new javax.swing.JFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        usersListGUI = new javax.swing.JList();
        addFriendButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        invitationListGUI = new javax.swing.JList();
        declineFriendButton = new javax.swing.JButton();
        acceptFriendButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        friendsListGUI = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        friendsRefreshButton = new javax.swing.JButton();
        ConnectButton = new javax.swing.JButton();
        IpLabel = new javax.swing.JLabel();
        PortLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        SendButton = new javax.swing.JButton();
        OnlineList = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        UsersOnlineLabel = new javax.swing.JLabel();
        UsernameLabel = new javax.swing.JLabel();
        Connectivity = new javax.swing.JTextField();
        DisconnectButton = new javax.swing.JButton();
        MessengerName = new javax.swing.JLabel();
        MessengerBuild = new javax.swing.JLabel();
        ConnectivityLabel = new javax.swing.JLabel();
        IpBox = new javax.swing.JTextField();
        PortBox = new javax.swing.JTextField();
        UsernameBox = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        BigPane = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        MsgBox = new javax.swing.JEditorPane();
        eventButton = new javax.swing.JButton();
        usersButton = new javax.swing.JButton();

        eventsWindow.setBounds(new java.awt.Rectangle(0, 0, 400, 350));
        eventsWindow.setName("eventsWindow"); // NOI18N

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        eventsList.setName("eventsList"); // NOI18N

        eventsGUI.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                eventsGUIValueChanged(evt);
            }
        });
        eventsList.setViewportView(eventsGUI);

        attendButton.setText("Attend");
        attendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attendButtonActionPerformed(evt);
            }
        });

        notAttendButton.setText("Not Attend");
        notAttendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notAttendButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Current Events");

        jLabel2.setText("Status: ");

        AttendingStatus.setName("AttendingStatus"); // NOI18N

        newEvent.setText("New");
        newEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newEventActionPerformed(evt);
            }
        });

        getAttendantsButton.setText("Get Attendants");
        getAttendantsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAttendantsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout eventsWindowLayout = new javax.swing.GroupLayout(eventsWindow.getContentPane());
        eventsWindow.getContentPane().setLayout(eventsWindowLayout);
        eventsWindowLayout.setHorizontalGroup(
            eventsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsWindowLayout.createSequentialGroup()
                .addGroup(eventsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventsWindowLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(getAttendantsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newEvent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton))
                    .addComponent(eventsList)
                    .addGroup(eventsWindowLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AttendingStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(attendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(notAttendButton)))
                .addContainerGap())
        );
        eventsWindowLayout.setVerticalGroup(
            eventsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(eventsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(refreshButton)
                        .addComponent(newEvent)
                        .addComponent(getAttendantsButton))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventsList, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(eventsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(attendButton)
                        .addComponent(notAttendButton))
                    .addGroup(eventsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(AttendingStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        newEventWindow.setBounds(new java.awt.Rectangle(0, 0, 220, 200));
        newEventWindow.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                newEventWindowWindowOpened(evt);
            }
        });

        jLabel3.setText("New Event Name: ");

        createNewEvent.setText("Create");
        createNewEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewEventActionPerformed(evt);
            }
        });

        jLabel4.setText("New Event Date:");

        javax.swing.GroupLayout newEventWindowLayout = new javax.swing.GroupLayout(newEventWindow.getContentPane());
        newEventWindow.getContentPane().setLayout(newEventWindowLayout);
        newEventWindowLayout.setHorizontalGroup(
            newEventWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newEventWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newEventWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newEventWindowLayout.createSequentialGroup()
                        .addComponent(newEventName, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(newEventWindowLayout.createSequentialGroup()
                        .addGroup(newEventWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addGroup(newEventWindowLayout.createSequentialGroup()
                                .addGroup(newEventWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(newEventWindowLayout.createSequentialGroup()
                                        .addComponent(Day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(newEventWindowLayout.createSequentialGroup()
                                        .addComponent(Hours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Minute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(createNewEvent)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        newEventWindowLayout.setVerticalGroup(
            newEventWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newEventWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newEventName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newEventWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newEventWindowLayout.createSequentialGroup()
                        .addGroup(newEventWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(newEventWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Hours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Minute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(createNewEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        attendantsWindow.setBounds(new java.awt.Rectangle(0, 0, 150, 200));
        attendantsWindow.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                attendantsWindowWindowOpened(evt);
            }
        });

        jScrollPane3.setViewportView(attendantsListGUI);

        javax.swing.GroupLayout attendantsWindowLayout = new javax.swing.GroupLayout(attendantsWindow.getContentPane());
        attendantsWindow.getContentPane().setLayout(attendantsWindowLayout);
        attendantsWindowLayout.setHorizontalGroup(
            attendantsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attendantsWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        attendantsWindowLayout.setVerticalGroup(
            attendantsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attendantsWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        usersFrame.setBounds(new java.awt.Rectangle(0, 0, 450, 350));
        usersFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                usersFrameWindowOpened(evt);
            }
        });

        jScrollPane4.setViewportView(usersListGUI);

        addFriendButton.setText("Add Friend");
        addFriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFriendButtonActionPerformed(evt);
            }
        });

        jScrollPane5.setViewportView(invitationListGUI);

        declineFriendButton.setText("Decline");
        declineFriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineFriendButtonActionPerformed(evt);
            }
        });

        acceptFriendButton.setText("Accept");
        acceptFriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptFriendButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Future Friends");

        jLabel6.setText("Friend Invitations");

        jScrollPane6.setViewportView(friendsListGUI);

        jLabel7.setText("Friends List");

        friendsRefreshButton.setText("Refresh");
        friendsRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friendsRefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout usersFrameLayout = new javax.swing.GroupLayout(usersFrame.getContentPane());
        usersFrame.getContentPane().setLayout(usersFrameLayout);
        usersFrameLayout.setHorizontalGroup(
            usersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usersFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(usersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(usersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(addFriendButton, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                    .addComponent(jLabel5))
                .addGroup(usersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(usersFrameLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(acceptFriendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(declineFriendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(friendsRefreshButton))
                    .addGroup(usersFrameLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(usersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(usersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        usersFrameLayout.setVerticalGroup(
            usersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usersFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(usersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(12, 12, 12)
                .addGroup(usersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(usersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptFriendButton)
                    .addComponent(addFriendButton)
                    .addComponent(declineFriendButton)
                    .addComponent(friendsRefreshButton))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        ConnectButton.setLabel("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        IpLabel.setText("Server IP");

        PortLabel.setText("Port");

        SendButton.setLabel("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        OnlineList.setViewportView(jTextArea3);

        UsersOnlineLabel.setText("Users Online // not implemented");

        UsernameLabel.setText("Username");

        Connectivity.setText("Not Connected");
        Connectivity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectivityActionPerformed(evt);
            }
        });

        DisconnectButton.setText("Disconnect");
        DisconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectButtonActionPerformed(evt);
            }
        });

        MessengerName.setText("Swaglord420 Messenger");

        MessengerBuild.setText("Build: v0.1a");

        ConnectivityLabel.setText("Connectivity to server: ");
        ConnectivityLabel.setAlignmentX(0.5F);

        IpBox.setText("127.0.0.1");

        PortBox.setText("22222");

        UsernameBox.setText("hue");

        jScrollPane1.setViewportView(BigPane);

        jScrollPane2.setViewportView(MsgBox);

        eventButton.setText("Events");
        eventButton.setName("eventButton"); // NOI18N
        eventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventButtonActionPerformed(evt);
            }
        });

        usersButton.setText("Users");
        usersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IpLabel)
                            .addComponent(IpBox, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PortLabel)
                            .addComponent(PortBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(UsernameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(ConnectButton))
                            .addComponent(UsernameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MessengerName)
                            .addComponent(MessengerBuild))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ConnectivityLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Connectivity, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DisconnectButton)
                                .addGap(183, 183, 183)
                                .addComponent(usersButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eventButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(SendButton))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(OnlineList, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(UsersOnlineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IpLabel)
                    .addComponent(PortLabel)
                    .addComponent(UsernameLabel)
                    .addComponent(MessengerName, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConnectButton)
                    .addComponent(MessengerBuild)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(IpBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PortBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(UsernameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UsersOnlineLabel)
                    .addComponent(Connectivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DisconnectButton)
                    .addComponent(ConnectivityLabel)
                    .addComponent(eventButton)
                    .addComponent(usersButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addComponent(OnlineList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConnectivityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectivityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConnectivityActionPerformed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        if(!UsernameBox.getText().contains(" ")&& !UsernameBox.getText().contains("/") &&
                !UsernameBox.getText().contains("!")&& !UsernameBox.getText().contains("^") &&
                !UsernameBox.getText().contains("'")&& !UsernameBox.getText().contains("+") &&
                !UsernameBox.getText().contains("%")&& !UsernameBox.getText().contains("*")&&
                !UsernameBox.getText().contains("&")&& !UsernameBox.getText().contains("~") &&
        !UsernameBox.getText().contains("-")&& !UsernameBox.getText().contains("|"))
        {
        
        
        
        dc = false;
        server = null;
        welcomeMSG = "";
        
        if(messageHandling.getState() != WAITING)
        {
            messageHandling.setDaemon(true);
            messageHandling.start(); 
        }

        ConnectButton.setEnabled(false);
        DisconnectButton.setEnabled(true);
        SendButton.setEnabled(true);
        eventButton.setEnabled(true);
        usersButton.setEnabled(true);
        
        
        try {
            socket = new Socket(IpBox.getText(), Integer.parseInt(PortBox.getText()));
        } catch (IOException | IllegalArgumentException e) {}
        
        
        
        try {
            append("Connecting to server: "+IpBox.getText() + ":" + PortBox.getText());
            append("Username: "+UsernameBox.getText());
            server = new ServerAdd(socket);
            
        } catch (IOException ex) {}
        }else    append("Username: "+UsernameBox.getText()+ " is invalid");
        
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        
        send(MsgBox.getText());
        
    }//GEN-LAST:event_SendButtonActionPerformed

    private void DisconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectButtonActionPerformed
        send("dc plos yolomaster420blazeitfgt"); //yeah guess it and break my program.
        append("Disconnecting...");
        eventButton.setEnabled(false);
        SendButton.setEnabled(false);
        ConnectButton.setEnabled(true);
        DisconnectButton.setEnabled(false);
        usersButton.setEnabled(false);
        enabled = false;
        Connectivity.setText("Disconnected");
        messages.clear();
        welcomeMSG = "";
    }//GEN-LAST:event_DisconnectButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        if(!dc)
        {
            send("dc plos yolomaster420blazeitfgt");
        }
        System.exit(1);
        
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        DisconnectButton.setEnabled(false);
        SendButton.setEnabled(false);
        eventButton.setEnabled(false);
        usersButton.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void eventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventButtonActionPerformed
        eventsWindow.setVisible(true);       // TODO add your handling code here:
        attendButton.setEnabled(false);
        notAttendButton.setEnabled(false);
        
        DefaultListModel listModel;
        listModel = new DefaultListModel();

        server.write("GETFRIENDFRAME");
        try {
            sleep(500);
        } catch (InterruptedException ex) {}

        server.write("GETEVENTS");
        try {
            sleep(100);
        } catch (InterruptedException ex) {}

        eventsGUI.setModel(listModel);
        
        for(String marul : visEvents)
            listModel.addElement(marul);
        
        eventsGUI.setSelectedValue(listModel, true);
        

        
        
        
        
        
        
        
    }//GEN-LAST:event_eventButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        //reset whatevers inside
        AttendingStatus.setText("");
        eventButton.doClick();
// TODO add your handling code here:
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void attendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attendButtonActionPerformed
        
        server.write("ATTENDEVENT" + selectedEvent);
        eventAttendBox.put(selectedEvent, "Attending");
        AttendingStatus.setText(eventAttendBox.get(selectedEvent));
        
        // TODO add your handling code here:
    }//GEN-LAST:event_attendButtonActionPerformed

    private void notAttendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notAttendButtonActionPerformed
        
        server.write("REJECTEVENT" + selectedEvent);
        eventAttendBox.put(selectedEvent, "Not attending");
        AttendingStatus.setText(eventAttendBox.get(selectedEvent));
        
        // TODO add your handling code here:
    }//GEN-LAST:event_notAttendButtonActionPerformed

    private void newEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newEventActionPerformed
        // TODO add your handling code here:
        newEventWindow.setVisible(true);
       // if()
       // server.write(UsernameBox + "NEWEVENT" + );
        
    }//GEN-LAST:event_newEventActionPerformed

    private void newEventWindowWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_newEventWindowWindowOpened
        getAttendantsButton.setEnabled(false);
        attendButton.setEnabled(false);
        notAttendButton.setEnabled(false);
        
        for(int i=1 ; i <= 30; i++){
        Day.addItem(Integer.toString(i));
        }
       
        for(int i=1 ; i <= 12; i++){
        Month.addItem(Integer.toString(i));
        }
        
        for(int i=1 ; i <= 24; i++){
        Hours.addItem(Integer.toString(i));
        }
         
        for(int i=1 ; i <= 60; i++){
        Minute.addItem(Integer.toString(i));
        }        // TODO add your handling code here:
    }//GEN-LAST:event_newEventWindowWindowOpened

    private void createNewEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewEventActionPerformed
        // TODO add your handling code here:
        server.write("NEWEVENT" + newEventName.getText() + "-" + Day.getSelectedItem() + "/" + Month.getSelectedItem() + "|" + Hours.getSelectedItem() + ":" + Minute.getSelectedItem());
        server.write("ATTENDEVENT" + newEventName.getText());
        eventAttendBox.put(newEventName.getText(), "Attending");
        newEventWindow.dispose();
        refreshButton.doClick();
    }//GEN-LAST:event_createNewEventActionPerformed

    private void eventsGUIValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_eventsGUIValueChanged
        selectedEvent = (String) eventsGUI.getSelectedValue();
        attendButton.setEnabled(true);
        notAttendButton.setEnabled(true);
        getAttendantsButton.setEnabled(true);
        
        if(selectedEvent != null)
        {
            String test = null;
            try{
                test = eventAttendBox.get(selectedEvent);
            }catch(NullPointerException e){}
            if(test == null) 
            {
                test = "Not answered";
                try{
                eventAttendBox.put(selectedEvent,"Not answered");
                }catch(NullPointerException e){}
            }
            AttendingStatus.setText(eventAttendBox.get(selectedEvent));
        }

    }//GEN-LAST:event_eventsGUIValueChanged

    private void getAttendantsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAttendantsButtonActionPerformed
        attendantsWindow.setVisible(true);
        server.write("GETATTENDANTS" + selectedEvent);
        addFriendButton.setEnabled(false);
        acceptFriendButton.setEnabled(false);
        declineFriendButton.setEnabled(false);
        
        DefaultListModel listModel;
        listModel = new DefaultListModel();

        try {
            sleep(1000);
        } catch (InterruptedException ex) {}

        attendantsListGUI.setModel(listModel);
        attendantsListGUI.setSelectedValue(listModel, true);
        
        
        List<Pair<Character,String>> temp = eventList.get(selectedEvent);
        
        for(Pair<Character,String> temp2 : temp)
        {
            listModel.addElement(temp2.right + " " + temp2.left);
        }
        
    
        attendantsListGUI.setSelectedValue(listModel, true);
        
    }//GEN-LAST:event_getAttendantsButtonActionPerformed

    private void attendantsWindowWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_attendantsWindowWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_attendantsWindowWindowOpened

    private void usersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersButtonActionPerformed
        usersFrame.setVisible(true);
        server.write("GETFRIENDFRAME");
        
        DefaultListModel listModelUsers;
        listModelUsers = new DefaultListModel();
        DefaultListModel listModelInvitation;
        listModelInvitation = new DefaultListModel();
        DefaultListModel listModelFriends;
        listModelFriends = new DefaultListModel();
        
        try {
            sleep(100);
        } catch (InterruptedException ex) {}
        
        usersListGUI.setModel(listModelUsers);
        invitationListGUI.setModel(listModelInvitation);
        friendsListGUI.setModel(listModelFriends);
        

        Enumeration items = friendList.keys();
        String currentKey = "";

        while(items.hasMoreElements())
        {
            currentKey = (String)items.nextElement();

            if(!currentKey.equals(UsernameBox.getText()) && !currentKey.equals("null"))
            {
                if(friendList.get(currentKey) == 'N')
                    listModelUsers.addElement(currentKey);
                else if(friendList.get(currentKey) == 'I')
                    listModelInvitation.addElement(currentKey);
                else if(friendList.get(currentKey) == 'F')
                    listModelFriends.addElement(currentKey);
            }
        }
                
        
        usersListGUI.setSelectedValue(listModelInvitation, true);
        invitationListGUI.setSelectedValue(listModelInvitation, true);
        friendsListGUI.setSelectedValue(listModelFriends, true);
        
    }//GEN-LAST:event_usersButtonActionPerformed

    private void acceptFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptFriendButtonActionPerformed
        server.write("FRIENDACCEPT " + (String) invitationListGUI.getSelectedValue());
        friendsRefreshButton.doClick();
    }//GEN-LAST:event_acceptFriendButtonActionPerformed

    private void addFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFriendButtonActionPerformed
        server.write("FRIENDREQUEST " + (String) usersListGUI.getSelectedValue());
        friendsRefreshButton.doClick();
    }//GEN-LAST:event_addFriendButtonActionPerformed

    private void declineFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineFriendButtonActionPerformed
        server.write("FRIENDREJECT " + (String) invitationListGUI.getSelectedValue());
        friendsRefreshButton.doClick();
    }//GEN-LAST:event_declineFriendButtonActionPerformed

    private void friendsRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friendsRefreshButtonActionPerformed
        usersButton.doClick();
    }//GEN-LAST:event_friendsRefreshButtonActionPerformed

    private void usersFrameWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_usersFrameWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_usersFrameWindowOpened

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AttendingStatus;
    private javax.swing.JEditorPane BigPane;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JTextField Connectivity;
    private javax.swing.JLabel ConnectivityLabel;
    private javax.swing.JComboBox Day;
    private javax.swing.JButton DisconnectButton;
    private javax.swing.JComboBox Hours;
    private javax.swing.JTextField IpBox;
    private javax.swing.JLabel IpLabel;
    private javax.swing.JLabel MessengerBuild;
    private javax.swing.JLabel MessengerName;
    private javax.swing.JComboBox Minute;
    private javax.swing.JComboBox Month;
    private javax.swing.JEditorPane MsgBox;
    private javax.swing.JScrollPane OnlineList;
    private javax.swing.JTextField PortBox;
    private javax.swing.JLabel PortLabel;
    private javax.swing.JButton SendButton;
    private javax.swing.JTextField UsernameBox;
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JLabel UsersOnlineLabel;
    private javax.swing.JButton acceptFriendButton;
    private javax.swing.JButton addFriendButton;
    private javax.swing.JButton attendButton;
    private javax.swing.JList attendantsListGUI;
    private javax.swing.JFrame attendantsWindow;
    private javax.swing.JButton createNewEvent;
    private javax.swing.JButton declineFriendButton;
    private javax.swing.JButton eventButton;
    private javax.swing.JList eventsGUI;
    private javax.swing.JScrollPane eventsList;
    private javax.swing.JFrame eventsWindow;
    private javax.swing.JList friendsListGUI;
    private javax.swing.JButton friendsRefreshButton;
    private javax.swing.JButton getAttendantsButton;
    private javax.swing.JList invitationListGUI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JButton newEvent;
    private javax.swing.JTextField newEventName;
    private javax.swing.JFrame newEventWindow;
    private javax.swing.JButton notAttendButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton usersButton;
    private javax.swing.JFrame usersFrame;
    private javax.swing.JList usersListGUI;
    // End of variables declaration//GEN-END:variables




private class ServerAdd {

        ObjectInputStream in;
        ObjectOutputStream out;
        Socket socket;
        String un;

        ServerAdd(Socket s) throws IOException {
            this.socket = s;
            un = UsernameBox.getText();
            enabled = true;
            welcomeMSG = "";
            Connectivity.setText("Connected");
            try{
            out = new ObjectOutputStream(socket.getOutputStream());
            out.flush();
            in = new ObjectInputStream(socket.getInputStream());
            }catch(NullPointerException e){}
            
            
            
            try {
                 welcomeMSG = in.readObject();
            } catch (ClassNotFoundException | NullPointerException ex) { welcomeMSG = "";}
            
            if(!welcomeMSG.equals("Welcome to Swaglord420 Messenger\n"))
            {
                append("No client found at IP: " + IpBox.getText() + ":" + PortBox.getText() + ". Disconnecting...");
                SendButton.setEnabled(false);
                ConnectButton.setEnabled(true);
                DisconnectButton.setEnabled(false);
                eventButton.setEnabled(false);
                enabled = false;
                dc = true;
                Connectivity.setText("Disconnected");
                messages.clear();
            }
            else{
            
            
            write(UsernameBox.getText());

            Thread read = new Thread() {
                public void run() {
                    while (enabled) {
                        try {
                            String obj = String.valueOf(in.readObject());
                            if(obj.equals("Username: "+ un +" is already taken, disconnecting..."))
                            {
                                append("Username: "+ un +" is already taken, disconnecting...");
                                SendButton.setEnabled(false);
                                DisconnectButton.setEnabled(false);
                                Connectivity.setText("Disconnected");
                                enabled = false;
                                ConnectButton.setEnabled(true);
                                dc = true;
                                eventButton.setEnabled(false);
                            }    
                            else if(obj.equals( "Server terminating..."))
                            {
                                append("Server is shut down by mysterious forces, terminating connection...");
                               // write("Ok, Bye!");
                                enabled = false;
                                SendButton.setEnabled(false);
                                DisconnectButton.setEnabled(false);
                                Connectivity.setText("Disconnected");  
                                ConnectButton.setEnabled(true);
                                eventButton.setEnabled(false);
                            }
                            else if(obj.matches(".*EVENTLIST.*"))
                            {
                                eventList.clear();
                                obj = obj.substring( obj.indexOf("EVENTLIST")+9,obj.length());
                                String[] eventNamess = obj.split(" ");
                                List<String> eventNames = new ArrayList();
                                Collections.addAll(eventNames,eventNamess);
                                eventNames.remove(0);    
                                
                                for(String lahana : eventNames)
                                {
                                    visEvents.clear();
                                    String eventHolder = lahana.substring(0, lahana.indexOf("#"));//+1??
                                    
                                    if(friendList.get(eventHolder).equals('F') || UsernameBox.getText().equals(eventHolder))
                                    {
                                        visEvents.add(lahana);
                                    }
                                }
                                
                                for(String patates : eventNames) //adds new keys
                                {
                                    List<Pair<Character ,String>> temp = new ArrayList<Pair<Character, String>>();
                                    eventList.put(patates, temp );
                                }
                            }
                            else if(obj.matches(".*ATTENDEES.*"))
                            {
                                obj = obj.substring( obj.indexOf("ATTENDEES")+9,obj.length());
                                String eventName = obj.substring(0, obj.indexOf(" ")); //last space will be a problem
                                obj = obj.substring(obj.indexOf(eventName)+eventName.length()+1,obj.length());
                                String[] attendees = obj.split(" ");
                                
                                List<Pair<Character ,String>> temp = new ArrayList<Pair<Character, String>>();
                                eventList.put(eventName, temp ); //resets the values
                                
                                for(String patlican : attendees) 
                                {
                                    eventList.get(eventName).add(new Pair<Character,String>(patlican.charAt(patlican.length()-1), patlican.substring(0,patlican.indexOf("/"))));
                                }
                            }
                            else if(obj.matches(".*FRIENDFRAME.*"))
                            {
                                obj = obj.substring(obj.indexOf("FRIENDFRAME")+11, obj.length());
                                String[] friends = obj.split(" ");
                                
                                for(String domtis : friends)
                                {
                                    friendList.put(domtis.substring(0,domtis.indexOf("/")),domtis.charAt(domtis.length()-1));
                                }
                            }
                            
                            else
                            {
                                messages.put(obj);
                            }
                                                        
                        } catch (InterruptedException | IOException | ClassNotFoundException e) {
                        }
                    }
                    if(!enabled)
                    {
                        
                        try {
                            in.close();
                            out.close();
                            socket.close();
                        } catch (IOException ex) {}
                        
                    }
                }
            };

            read.setDaemon(true);
            read.start();
        }
        }

        private void write(String obj) {
            try {
                out.writeObject(obj);
            } catch (IOException e) {
            }
        }
    }

    public void send(String obj) {
        server.write(obj);
    }

    public void append(String s) {
        Document doc = BigPane.getDocument();
        s = "\n" +s;
        try {
            doc.insertString(doc.getLength(), s, null);
        } catch (BadLocationException ex) {
        }
    }





}
